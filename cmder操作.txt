cmder 对git的控制命令
	git status	查看状态
	
远程仓库
	git remote add origin(别名) git@github.com/*********
	git push origin master //推送到origin库 里面的master分支
	
添加文件到缓存区
	git add a.txt	提交文件
	git add 文件夹	提交文件夹
	git add .		提交当前空间的全部文件
	
	
提交缓存区到数据库
	git commit -m "**"		提交到本地数据库
	
	
删除文件
	git rm b.txt			删除文件的同时，提交到暂存区，但是不提交。
	
	
数据库里面删除，取消跟踪状态，但是不删除文件实体
	git rm --cached d.txt	实体还在，不被跟踪。
	
	
修改文件名
	git mv a.txt aa.txt  修改a.txt到aa.txt
	
	
查看文件提交历史
	git log 查看文件所有的提交日志
	get log --pretty=oneline
	
	
取消已经暂存的文件
	git reset
回退到某个版本
	首先查看文件提交历史，在里面找到版本号
	get reset --hard 版本号  只需要输入前面7位
	git reflog  查看所有提交历史
	
git --help
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:
创建工作空间
start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one
   
通用操作
work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

检查版本以及日志 
examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status
   
历史记录
grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Forward-port local commits to the updated upstream head
   tag        Create, list, delete or verify a tag object signed with GPG

合作
collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.